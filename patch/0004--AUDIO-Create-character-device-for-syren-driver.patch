From ff38ee77d46b43b733a62c3c3f8702288a445ad2 Mon Sep 17 00:00:00 2001
From: Marek Belisko <marek.belisko@open-nandra.com>
Date: Tue, 19 May 2009 23:42:43 +0200
Subject: [AUDIO] Create character device for syren driver.
 Minor files cleanup.
 Signed-off-by: Marek Belisko <marek.belisko@open-nandra.com>

---
 drivers/misc/omap850-audio.c |  108 +++++++------------
 drivers/misc/omap850-audio.h |    2 +-
 drivers/misc/omap850-syren.c |  246 ++++++++++++++++++++++++------------------
 3 files changed, 182 insertions(+), 174 deletions(-)

diff --git a/drivers/misc/omap850-audio.c b/drivers/misc/omap850-audio.c
index d7d9249..8831fa5 100755
--- a/drivers/misc/omap850-audio.c
+++ b/drivers/misc/omap850-audio.c
@@ -80,16 +80,19 @@
 
 static spinlock_t bufindex_lock = SPIN_LOCK_UNLOCKED;
 volatile unsigned short max_dma_count = 0;
-/**/
+
+
+/* dump registers for DMA */
 void dump_regs(char *msg, int ch)
 {
 #ifdef DEBUG
 
-#define DBPRINT(name, addr)     printk("%s: %s(@0x%08x) = 0x%08x\n", __FUNCTION__, name, addr, *(addr));
+#define DBPRINT(name, addr) \
+	printk(KERN_ALERT "%s: %s(@0x%08x)\n", __FUNCTION__, name, addr);
 
-	printk("***** %s: %s *****\n", __FUNCTION__, msg);
+	printk(KERN_ALERT"***** %s: %s *****\n", __FUNCTION__, msg);
 
-	printk("******** DMA channel %d settings ********\n", ch);
+	printk(KERN_ALERT"******** DMA channel %d settings ********\n", ch);
 	DBPRINT("OMAP_DMA_CSDP_REG", OMAP_DMA_CSDP_REG(ch));
 	DBPRINT("OMAP_DMA_CCR_REG", OMAP_DMA_CCR_REG(ch));
 	DBPRINT("OMAP_DMA_CCR2_REG", OMAP_DMA_CCR2_REG(ch));
@@ -199,7 +202,6 @@ void audio_configure_dma_channel(audio_stream_t *s)
 
         omap_set_dma_params(s->dma_ch, &params);
 
-
 	dump_regs("audio_configure_dma_channel()", s->dma_ch);
 }
 
@@ -249,23 +251,16 @@ static int audio_setup_buf(audio_stream_t * s)
 		return -EBUSY;
 
 	/* Our buffer structure array */
-	s->user_buf = kmalloc(sizeof(audio_user_buf_t) * s->nbfrags, GFP_KERNEL);
-	if (!s->user_buf)
-	{
+	s->user_buf = kzalloc(sizeof(audio_user_buf_t) * s->nbfrags, GFP_KERNEL);
+	if (!s->user_buf) 
 		goto err;
-	}
-	memzero(s->user_buf, sizeof(audio_user_buf_t) * s->nbfrags);
-
+	
 	/* Our user buffers */
 	for (frag = 0; frag < s->nbfrags; frag++) {
 		audio_user_buf_t *b = &s->user_buf[frag];
-		b->data = kmalloc(s->fragsize, GFP_KERNEL);
+		b->data = kzalloc(s->fragsize, GFP_KERNEL);
 		if (!b->data)
-		{
-			goto err;
-		}
-		memzero(b->data, s->fragsize);
-
+		
 		/* handle buffer pointers */
 		b->offset = 0;
 	}
@@ -275,9 +270,8 @@ static int audio_setup_buf(audio_stream_t * s)
 	 */
 	dma_buf = dma_alloc_coherent(NULL, s->fragsize * AUDIO_NBFRAGS_DMA, &dma_buf_phys, 0);
 	if (!dma_buf)
-	{
 		goto err;
-	}
+	
 	memzero(dma_buf, s->fragsize * AUDIO_NBFRAGS_DMA);
 	s->dma_buf.vaddr = dma_buf;
 	s->dma_buf.dma_addr = dma_buf_phys;
@@ -285,12 +279,12 @@ static int audio_setup_buf(audio_stream_t * s)
 	// Reconfigure the DMA to reflect the DMA physical address and buffer size
 	audio_configure_dma_channel(s);
 
-#if 0	// Debug
-	printk("%s: s=0x%08x\n", __FUNCTION__, s);
-	printk("%s: s->user_buf=0x%08x, s->dma_buf.vaddr=0x%08x, s->dma_buf.dma_addr=0x%08x, s->fragsize=0x%08x\n",__FUNCTION__, s->user_buf, s->dma_buf.vaddr, s->dma_buf.dma_addr, s->fragsize);
+#ifdef DEBUG 
+	printk(KERN_ALERT "%s: s=%p\n", __FUNCTION__, s);
+	printk(KERN_ALERT "%s: s->user_buf=%p, s->dma_buf.vaddr=%p, s->dma_buf.dma_addr=0x%08x, s->fragsize=0x%08x\n",__FUNCTION__, s->user_buf, s->dma_buf.vaddr, s->dma_buf.dma_addr, s->fragsize);
 
 	for (frag = 0; frag < s->nbfrags; frag++) {
-		printk("%s: s->user_buf[%d].data=0x%08x\n", __FUNCTION__, frag, s->user_buf[frag].data);
+		printk(KERN_ALERT "%s: s->user_buf[%d].data=0x%08x\n", __FUNCTION__, frag, *(s->user_buf[frag].data));
 	}
 #endif
 
@@ -303,13 +297,13 @@ static int audio_setup_buf(audio_stream_t * s)
 	return 0;
 
 err:
-	printk("omap-audio: unable to allocate audio memory\n ");
+	printk(KERN_ALERT "omap-audio: unable to allocate audio memory\n ");
 	audio_clear_buf(s);
 	return -ENOMEM;
 }
 
 /*
- * Our DMA interrupt handler
+ * DMA interrupt handler
  */
 static void audio_dma_irq(int lch, u16 ch_status, void *data)
 {
@@ -317,8 +311,6 @@ static void audio_dma_irq(int lch, u16 ch_status, void *data)
 	int ch;
 	
 	ch = s->dma_ch;
-//FIXME: how to get status?
-// 	ch_status = omap_dma_get_status(OMAP_DMA_REGS(ch));
 
 	if (!s->user_buf) {
 		printk("OMAP730 AUDIO DMA: wow... received IRQ for channel %d but no buffer exists\n", ch);
@@ -327,30 +319,23 @@ static void audio_dma_irq(int lch, u16 ch_status, void *data)
 
 	// Process the half frame interrupt:
 	//  now the first half of the buffer is not in use by the DMA anymore
-	if (ch_status & OMAP_DMA_HALF_IRQ)
-	{
-		if (s->output)
-		{
+	if (ch_status & OMAP_DMA_HALF_IRQ) {
+		if (s->output)	{
 			// Check if we have free buffers
-			if (USER_BUF_IS_EMPTY(s))
-			{
+			if (USER_BUF_IS_EMPTY(s)) {
 				stop_dma(s);
-			} else
-			{
+			} else {
 				// Copy the next user buffer to the first half of the DMA buffer
 				memcpy(s->dma_buf.vaddr, s->user_buf[s->dma_frag].data, s->fragsize);
 
 				if (++s->dma_frag >= s->nbfrags)
 					s->dma_frag = 0;
 			}
-		} else
-		{
+		} else {
 			// Check if we have free buffers
-			if (!USER_BUF_READ_HAS_PLACE(s))
-			{
+			if (!USER_BUF_READ_HAS_PLACE(s)) {
 				stop_dma(s);
-			} else
-			{
+			} else {
 				// Copy the first half of the DMA buffer to the next user buffer
 				memcpy(s->user_buf[s->dma_frag].data, s->dma_buf.vaddr, s->fragsize);
 
@@ -360,6 +345,7 @@ static void audio_dma_irq(int lch, u16 ch_status, void *data)
 		}
 
 		// Wake-up waiting processes
+		/*FIXME: where is down called ? */
 		if (!s->mapped)
 			up(&s->sem);
 
@@ -373,29 +359,22 @@ static void audio_dma_irq(int lch, u16 ch_status, void *data)
 
 	// Process the end of frame interrupt:
 	//  now the second half of the buffer is not in use by the DMA anymore
-	if (ch_status & OMAP_DMA_FRAME_IRQ)
-	{
-		if (s->output)
-		{
+	if (ch_status & OMAP_DMA_FRAME_IRQ) {
+		if (s->output)	{
 			// Check if we have free buffers
-			if (USER_BUF_IS_EMPTY(s))
-			{
+			if (USER_BUF_IS_EMPTY(s)) {
 				stop_dma(s);
-			} else
-			{
+			} else {
 				// Copy the next user buffer to the second half of the DMA buffer
 				memcpy(s->dma_buf.vaddr + s->fragsize, s->user_buf[s->dma_frag].data, s->fragsize);
 
 				if (++s->dma_frag >= s->nbfrags)
 					s->dma_frag = 0;
 			}
-		} else
-		{
-			if (!USER_BUF_READ_HAS_PLACE(s))
-			{
+		} else {
+			if (!USER_BUF_READ_HAS_PLACE(s)) {
 				stop_dma(s);
-			} else
-			{
+			} else {
 				// Copy the first half of the DMA buffer to the next user buffer
 				// Copy the second half of the DMA buffer to the next user buffer
 				memcpy(s->user_buf[s->dma_frag].data, s->dma_buf.vaddr + s->fragsize, s->fragsize);
@@ -985,8 +964,7 @@ static int audio_release(struct inode *inode, struct file *file)
 		state->wr_ref = 0;
 	}
 
-	if ((state->rd_ref == 0) && (state->wr_ref == 0))
-	{
+	if ((state->rd_ref == 0) && (state->wr_ref == 0)) {
 		if (state->hw_shutdown)
 			state->hw_shutdown(state);
 	}
@@ -1039,13 +1017,6 @@ int omap_audio_attach(struct inode *inode, struct file *file,
 	}
 
 	file->private_data	= state;
-// 	file->f_op->release	= audio_release;
-// 	file->f_op->write	= audio_write;
-// 	file->f_op->read	= audio_read;
-// 	file->f_op->mmap	= audio_mmap;
-// 	file->f_op->poll	= audio_poll;
-// 	file->f_op->ioctl	= audio_ioctl;
-// 	file->f_op->llseek	= no_llseek;
 
 	if ((file->f_mode & FMODE_WRITE)) {
 		state->wr_ref = 1;
@@ -1092,16 +1063,13 @@ static struct file_operations omap850_audio_fops = {
 	.owner		= THIS_MODULE
 };
 
-/* return fileoperations structure */
-struct file_operations *audio_get_fops(void)
+/* return file_operations structure */
+struct file_operations *omap_audio_get_fops(void)
 {
 	return &omap850_audio_fops;
 }
 
-EXPORT_SYMBOL(audio_get_fops);
-
-MODULE_LICENSE("GPL");
-
+EXPORT_SYMBOL(omap_audio_get_fops);
 EXPORT_SYMBOL(omap_audio_attach);
 EXPORT_SYMBOL(omap_audio_clear_buf);
 EXPORT_SYMBOL(audio_ldm_resume);
diff --git a/drivers/misc/omap850-audio.h b/drivers/misc/omap850-audio.h
index 52298f7..8d185d8 100755
--- a/drivers/misc/omap850-audio.h
+++ b/drivers/misc/omap850-audio.h
@@ -58,7 +58,7 @@ extern int omap_audio_attach(struct inode *inode, struct file *file,
 				audio_state_t *state);
 extern void omap_audio_clear_buf(audio_stream_t *s);
 
-
+extern struct file_operations *omap_audio_get_fops(void);
 /* User buffers mgt macros */
 
 // Has place: at least one buffer is free to use
diff --git a/drivers/misc/omap850-syren.c b/drivers/misc/omap850-syren.c
index 8a8b351..4f3cc15 100755
--- a/drivers/misc/omap850-syren.c
+++ b/drivers/misc/omap850-syren.c
@@ -62,7 +62,7 @@
 
 #include "omap850-audio.h"
 #include <asm/irq.h>
-
+#include <linux/miscdevice.h>
 #define CONFIG_CEE
 
 // #undef DEBUG
@@ -189,19 +189,19 @@ typedef struct
 /*
   Local prototypes.
 */
-static void omap730_audio_init(void *dummy);
-static void omap730_audio_shutdown(void *dummy);
-//FIXME static int omap730_audio_ioctl(struct inode *inode, struct file *file,
+static void omap850_audio_init(void *dummy);
+static void omap850_audio_shutdown(void *dummy);
+//FIXME static int omap850_audio_ioctl(struct inode *inode, struct file *file,
 //                                 uint cmd, ulong arg);
-static int omap730_getclock(void);
-static void omap730_setclock(int on_off);
+static int omap850_getclock(void);
+static void omap850_setclock(int on_off);
 
 
 #ifdef CONFIG_CEE  /* MVL-CEE */
 #include <linux/device.h>
 
-static int omap730_audio_suspend(struct device * dev, u32 state, u32 level);
-static int omap730_audio_resume(struct device * dev, u32 level);
+static int omap850_audio_suspend(struct device * dev, u32 state, u32 level);
+static int omap850_audio_resume(struct device * dev, u32 level);
 
 extern u32 GTI_IOControl(u32 hOpenContext, u32 dwCode, u8* pBufIn, u32 dwLenIn, u8* pBufOut, u32 dwLenOut, u32* pdwActualOut);
 static int GSM_WriteAbb(u16 Page,u16 RegisterAddr,u16 Value);
@@ -218,7 +218,7 @@ static int GTI_Audio_Profileload(u8 Profile);
 static int bt_control(int on_off);
 static void modem_bypass(int on_off);
 static struct device_driver audio_driver_ldm = {
-       name:      "omap730-syren",
+       name:      "omap850-syren",
        probe:     NULL,
        remove:    NULL,
 };
@@ -265,9 +265,9 @@ static audio_stream_t input_stream = {
 static audio_state_t audio_state = {
 	output_stream:	&output_stream,
 	input_stream:	&input_stream,
-	hw_init:	omap730_audio_init,
-	hw_shutdown:	omap730_audio_shutdown,
-// FIXME	client_ioctl:	omap730_audio_ioctl,
+	hw_init:	omap850_audio_init,
+	hw_shutdown:	omap850_audio_shutdown,
+// FIXME	client_ioctl:	omap850_audio_ioctl,
 // FIXME	sem:		__MUTEX_INITIALIZER(audio_state.sem),
 };
 
@@ -320,13 +320,13 @@ static void eac_dump(void)
 }
 
 
-static void omap730_eac_write(__u16* addr, __u16 data) 
+static void omap850_eac_write(__u16* addr, __u16 data) 
 {
 	DPRINTK("%s: addr 0x%08x, data 0x%04x\n", __FUNCTION__, (int) addr, data);
 	*((__u16 *) addr) = data;
 }
 
-static u16 omap730_eac_read(__u16* addr) 
+static u16 omap850_eac_read(__u16* addr) 
 {
 	__u16 data;
 	
@@ -346,8 +346,8 @@ static void eac_update(void)
 	FN_IN;
 
 	// Enable the EAC clock if needed
-	if (!(clock_enabled = omap730_getclock()))
-		omap730_setclock(1);
+	if (!(clock_enabled = omap850_getclock()))
+		omap850_setclock(1);
 
 	// PCM -> Mixer 2B & 3B
 	// LINE & MIC -> Mixer 1A & 3A
@@ -363,20 +363,20 @@ static void eac_update(void)
 	mixer3_vol |= (volume << MIXER_x_B_GAIN_OFFSET) & MIXER_x_B_MASK;
 
 	// Use some read/write/read algotithm to prevent strange EAC mixer registers access problem
-	reg1_vol = omap730_eac_read((u16 *) EAC_AM1VCTR);
-	reg2_vol = omap730_eac_read((u16 *) EAC_AM2VCTR);
-	reg3_vol = omap730_eac_read((u16 *) EAC_AM3VCTR);
+	reg1_vol = omap850_eac_read((u16 *) EAC_AM1VCTR);
+	reg2_vol = omap850_eac_read((u16 *) EAC_AM2VCTR);
+	reg3_vol = omap850_eac_read((u16 *) EAC_AM3VCTR);
 	// Apply volume to Mixer1
-       	omap730_eac_write((u16 *) EAC_AM1VCTR, mixer1_vol);
+       	omap850_eac_write((u16 *) EAC_AM1VCTR, mixer1_vol);
 	// Apply volume to Mixer2
-	omap730_eac_write((u16 *) EAC_AM2VCTR, mixer2_vol);
+	omap850_eac_write((u16 *) EAC_AM2VCTR, mixer2_vol);
 	// Apply volume to Mixer3
-       	omap730_eac_write((u16 *) EAC_AM3VCTR, mixer3_vol);
+       	omap850_eac_write((u16 *) EAC_AM3VCTR, mixer3_vol);
 	mdelay(1);
 	// Check the registers values
-	reg1_vol = omap730_eac_read((u16 *) EAC_AM1VCTR);
-	reg2_vol = omap730_eac_read((u16 *) EAC_AM2VCTR);
-	reg3_vol = omap730_eac_read((u16 *) EAC_AM3VCTR);
+	reg1_vol = omap850_eac_read((u16 *) EAC_AM1VCTR);
+	reg2_vol = omap850_eac_read((u16 *) EAC_AM2VCTR);
+	reg3_vol = omap850_eac_read((u16 *) EAC_AM3VCTR);
 
 	// Feedback on the actual mixer settings
 	if (reg1_vol != mixer1_vol || reg2_vol != mixer2_vol || reg3_vol != mixer3_vol)
@@ -387,7 +387,7 @@ static void eac_update(void)
 
 	// Disable the EAC clock if it was disabled when entering the function
 	if (!clock_enabled)
-		omap730_setclock(0);
+		omap850_setclock(0);
 
 	FN_OUT(0);
 }
@@ -585,7 +585,7 @@ static int mixer_ioctl(struct inode *inode, struct file *file, uint cmd, ulong a
 			if (ret)
 				return ret;
 			
-			omap730_eac_write((u16 *) EAC_AMSCFR, val_tmp);
+			omap850_eac_write((u16 *) EAC_AMSCFR, val_tmp);
 			FN_OUT(10);
 			return 0;
 		}
@@ -673,7 +673,7 @@ static int mixer_ioctl(struct inode *inode, struct file *file, uint cmd, ulong a
 
 }
 
-static struct file_operations omap730_mixer_fops = {
+static struct file_operations omap850_mixer_fops = {
 	ioctl:		mixer_ioctl,
 	owner:		THIS_MODULE
 };
@@ -685,7 +685,7 @@ static struct file_operations omap730_mixer_fops = {
 
 static long audio_samplerate = AUDIO_RATE_DEFAULT;
 
-static void omap730_set_samplerate(long val)
+static void omap850_set_samplerate(long val)
 {
         int fsint = 0;
 
@@ -707,9 +707,9 @@ static void omap730_set_samplerate(long val)
         some critic code will be pushed back from V.1.14 to V.1.12!
                 dannywang,050710!
         */
-        omap730_setclock(1);
+        omap850_setclock(1);
 #endif
-	fsint = omap730_eac_read((u16 *) EAC_AGCFR) & ~EAC_AGCFR_FSINT_MASK;
+	fsint = omap850_eac_read((u16 *) EAC_AGCFR) & ~EAC_AGCFR_FSINT_MASK;
 
         /*
          * We have the following clock sources:
@@ -745,32 +745,32 @@ static void omap730_set_samplerate(long val)
 		fsint |= EAC_AGCFR_FSINT_8KHZ;
 	  }
 
-	omap730_eac_write((u16 *) EAC_AGCFR, fsint);
+	omap850_eac_write((u16 *) EAC_AGCFR, fsint);
 	audio_samplerate = val;
 	FN_OUT(0);
 }
 
-static int omap730_getclock(void)
+static int omap850_getclock(void)
 {
-	return (omap730_eac_read((u16 *) EAC_AGCTR) & EAC_AGCTR_MCLK_EN);
+	return (omap850_eac_read((u16 *) EAC_AGCTR) & EAC_AGCTR_MCLK_EN);
 }
 
 /* Warning: init/deinit operation order is important to keep the codec in sync
 	with the I2S frames.
    Init:   Enable Syren codec (GTI_SetupAudio(1))
-           Enable EAC Codec Port & Clocks (omap730_setclock(1))
+           Enable EAC Codec Port & Clocks (omap850_setclock(1))
            Enable DMA
    Deinit: Disable DMA
-           Disable EAC Codec Port & Clocks (omap730_setclock(0))
+           Disable EAC Codec Port & Clocks (omap850_setclock(0))
 	   Disable Syren codec (GTI_SetupAudio(0))
 */
-static void omap730_setclock(int on_off)
+static void omap850_setclock(int on_off)
 {
     u16 agctr_temp, soft_temp;
     u16 temp;
     
-    agctr_temp = omap730_eac_read((u16 *) EAC_AGCTR) & ~EAC_AGCTR_RESERVED;
-    soft_temp = omap730_eac_read((u16 *) SOFT_REQ_REG);
+    agctr_temp = omap850_eac_read((u16 *) EAC_AGCTR) & ~EAC_AGCTR_RESERVED;
+    soft_temp = omap850_eac_read((u16 *) SOFT_REQ_REG);
 
     if (on_off)
     {
@@ -778,35 +778,35 @@ static void omap730_setclock(int on_off)
 	agctr_temp |= EAC_AGCTR_MCLK_EN;
 	agctr_temp &= ~EAC_AGCTR_EACPWD;
 	soft_temp |= SOFT_REQ_REG_EAC12M_DPLL_REQ;
-    	omap730_eac_write((u16 *) EAC_AGCTR, agctr_temp);
+    	omap850_eac_write((u16 *) EAC_AGCTR, agctr_temp);
     	mdelay(1);
-    	omap730_eac_write((u16 *) SOFT_REQ_REG, soft_temp);
+    	omap850_eac_write((u16 *) SOFT_REQ_REG, soft_temp);
 
 	// Enable C-Port
-	temp = omap730_eac_read((u16 *) EAC_CPTCTL);
+	temp = omap850_eac_read((u16 *) EAC_CPTCTL);
 	temp |= EAC_CPTCTL_CPEN;
-	omap730_eac_write((u16 *) EAC_CPTCTL, temp);	
+	omap850_eac_write((u16 *) EAC_CPTCTL, temp);	
     }
     else 
     {
 //FIXME   	modem_bypass(1);  	
 	// Disable C-Port
-	temp = omap730_eac_read((u16 *) EAC_CPTCTL);
+	temp = omap850_eac_read((u16 *) EAC_CPTCTL);
 	temp &= ~EAC_CPTCTL_CPEN;
-	omap730_eac_write((u16 *) EAC_CPTCTL, temp);	
+	omap850_eac_write((u16 *) EAC_CPTCTL, temp);	
 
 	// Disable clock & enable low power
 	agctr_temp &= ~EAC_AGCTR_MCLK_EN;
 	agctr_temp |= EAC_AGCTR_EACPWD;
 	soft_temp &= ~SOFT_REQ_REG_EAC12M_DPLL_REQ;
-    	omap730_eac_write((u16 *) SOFT_REQ_REG, soft_temp);
-    	omap730_eac_write((u16 *) EAC_AGCTR, agctr_temp);
+    	omap850_eac_write((u16 *) SOFT_REQ_REG, soft_temp);
+    	omap850_eac_write((u16 *) EAC_AGCTR, agctr_temp);
     	mdelay(1);
     }
 
 }
 
-static void omap730_audio_init(void *dummy)
+static void omap850_audio_init(void *dummy)
 {
 	FN_IN;
 
@@ -823,12 +823,12 @@ static void omap730_audio_init(void *dummy)
                 Note: according to the issues which can't support MT function and
         some critic code will be pushed back from V.1.14 to V.1.12!
         */
-        omap730_setclock(1);
+        omap850_setclock(1);
                                                                                                                              
         // Setup K switches for Phone Call + play/record
-        // omap730_eac_write((u16 *) EAC_AMSCFR, EAC_AMSCFR_DEFAULT_SWITCHES);
+        // omap850_eac_write((u16 *) EAC_AMSCFR, EAC_AMSCFR_DEFAULT_SWITCHES);
                                                                                                                              
-        omap730_set_samplerate(audio_samplerate);
+        omap850_set_samplerate(audio_samplerate);
                                                                                                                              
 #endif
 
@@ -837,7 +837,7 @@ static void omap730_audio_init(void *dummy)
 	FN_OUT(0);
 }
 
-static void omap730_audio_shutdown(void *dummy)
+static void omap850_audio_shutdown(void *dummy)
 {
 	u16 temp;
 
@@ -854,13 +854,13 @@ static void omap730_audio_shutdown(void *dummy)
         schedule_timeout(2);
 
 	// Audio Global Control Register 2
-	temp = omap730_eac_read((u16 *) EAC_AGCTR);
+	temp = omap850_eac_read((u16 *) EAC_AGCTR);
 	// DMA read and write operation disabled
 	temp &= ~(EAC_AGCTR_DMAWEN | EAC_AGCTR_DMAREN);
-	omap730_eac_write((u16 *) EAC_AGCTR, temp);
+	omap850_eac_write((u16 *) EAC_AGCTR, temp);
 	
 	// Shutdown the I2S codec through the ARM7.
-	omap730_setclock(0);
+	omap850_setclock(0);
 	// Disable EAC clocks
 	//GTI_SetupAudio(0);
 
@@ -871,7 +871,7 @@ static void omap730_audio_shutdown(void *dummy)
 extern void sleep_mode_ctrl(unsigned char mode);
 extern int vrio_mode_ctrl(unsigned char mode);
 
-static int omap730_audio_suspend(struct device *dev, u32 state, u32 level)
+static int omap850_audio_suspend(struct device *dev, u32 state, u32 level)
 {
   extern void audio_ldm_suspend(void *data);
 
@@ -880,10 +880,10 @@ static int omap730_audio_suspend(struct device *dev, u32 state, u32 level)
   {
      case SUSPEND_POWER_DOWN: 
 */
-       /* Turn off power to omap730_audio */
+       /* Turn off power to omap850_audio */
        /* FIXME
        audio_ldm_suspend(&audio_state);      
-       omap730_setclock(0);
+       omap850_setclock(0);
        sleep_mode_ctrl(4);
        vrio_mode_ctrl(0);*/
        //GTI_SetupAudio(0);
@@ -895,7 +895,7 @@ static int omap730_audio_suspend(struct device *dev, u32 state, u32 level)
   return 0;
 }
 
-static int omap730_audio_resume(struct device *dev, u32 level)
+static int omap850_audio_resume(struct device *dev, u32 level)
 {
   extern void audio_ldm_resume(void *data);
 
@@ -905,10 +905,10 @@ static int omap730_audio_resume(struct device *dev, u32 level)
   {
      case RESUME_POWER_ON: */
 
-       /* Turn on power to omap730_audio */
+       /* Turn on power to omap850_audio */
 
        //GTI_SetupAudio(1);
-   /*    omap730_setclock(1);
+   /*    omap850_setclock(1);
        audio_ldm_resume(&audio_state);
        vrio_mode_ctrl(1);
        break;
@@ -921,7 +921,7 @@ static int omap730_audio_resume(struct device *dev, u32 level)
 #endif
 
 #if 0
-static int omap730_audio_ioctl(struct inode *inode, struct file *file,
+static int omap850_audio_ioctl(struct inode *inode, struct file *file,
                                 uint cmd, ulong arg)
 {
 	long val;
@@ -952,7 +952,7 @@ static int omap730_audio_ioctl(struct inode *inode, struct file *file,
 	case SNDCTL_DSP_SPEED:
 		ret = get_user(val, (long *) arg);
 		if (ret) break;
-		omap730_set_samplerate(val);
+		omap850_set_samplerate(val);
 		/* fall through */
 
 	case SOUND_PCM_READ_RATE:
@@ -1142,7 +1142,7 @@ static int omap730_audio_ioctl(struct inode *inode, struct file *file,
 		if (ret)
 			return ret;
 		
-		omap730_eac_write((u16 *) EAC_AMSCFR, val_tmp);
+		omap850_eac_write((u16 *) EAC_AMSCFR, val_tmp);
 		FN_OUT(10);
 		return 0;
 	}			
@@ -1273,7 +1273,7 @@ static int omap730_audio_ioctl(struct inode *inode, struct file *file,
 	return ret;
 }
 #endif /*0*/
-static int omap730_audio_open(struct inode *inode, struct file *file)
+static int omap850_audio_open(struct inode *inode, struct file *file)
 {
 	return omap_audio_attach(inode, file, &audio_state);
 }
@@ -1316,8 +1316,8 @@ static int create_eac_proc(void)
  * Missing fields of this structure will be patched with the call
  * to omap_audio_attach().
  */
-static struct file_operations omap730_audio_fops = {
-	open:		omap730_audio_open,
+static struct file_operations omap850_audio_fops = {
+	open:		omap850_audio_open,
 	owner:		THIS_MODULE
 };
 
@@ -1782,7 +1782,7 @@ static void modem_bypass(int on_off)
 static int audio_dev_id, mixer_dev_id;
 
 #define EAC_BPMCCFR_DEFAULT_SLAVE_NOCOMP_13BITS 0x00EC
-static int __init omap730_syren_init(void)
+static int __init omap850_syren_probe(void)
 {
 	u16 temp;
 	FN_IN;
@@ -1813,34 +1813,34 @@ static int __init omap730_syren_init(void)
 	 */
 
 	// Audio Global Control Register 2
-	temp = omap730_eac_read((u16 *) EAC_AGCTR);
+	temp = omap850_eac_read((u16 *) EAC_AGCTR);
 	// EAC in powerdown mode
 	temp |= EAC_AGCTR_EACPWD;
 	// Audio processing disabled
 	temp &= ~EAC_AGCTR_AUDEN;
-	omap730_eac_write((u16 *) EAC_AGCTR, temp);
+	omap850_eac_write((u16 *) EAC_AGCTR, temp);
 
 	// Audio Global Configuration Register
-	temp = omap730_eac_read((u16 *) EAC_AGCFR) & EAC_AGCFR_RESERVED;
+	temp = omap850_eac_read((u16 *) EAC_AGCFR) & EAC_AGCFR_RESERVED;
 	// stereo, 16 bit audio file
 	temp |= EAC_AGCFR_B8_16 | EAC_AGCFR_MN_ST;
 	// clock setting
 	temp |= EAC_AGCFR_AUD_CKSRC_12MHZ;
-	omap730_eac_write((u16 *) EAC_AGCFR, temp);
+	omap850_eac_write((u16 *) EAC_AGCFR, temp);
 
 	// EAC rev2 Intermediate sample frequency for DMA read and write operations
-	omap730_set_samplerate(AUDIO_RATE_DEFAULT);
+	omap850_set_samplerate(AUDIO_RATE_DEFAULT);
 
 	// set clock on
-	omap730_setclock(1);
+	omap850_setclock(1);
 
 	// Audio Mixer Switchs Configuration Register
-	omap730_eac_write((u16 *) EAC_AMSCFR, 0xFEF); //0xFEF); //k5 = 0 becoz c-codec no input EAC_AMSCFR_DEFAULT_SWITCHES);
-	//omap730_eac_write((u16 *) EAC_AMSCFR, 0x0A00);
+	omap850_eac_write((u16 *) EAC_AMSCFR, 0xFEF); //0xFEF); //k5 = 0 becoz c-codec no input EAC_AMSCFR_DEFAULT_SWITCHES);
+	//omap850_eac_write((u16 *) EAC_AMSCFR, 0x0A00);
 
 	// Set default volume
 	// Default DMA volume
-	omap730_eac_write((u16 *) EAC_AMVCTR, (DMA_DEFAULT_VOLUME << EAC_AMVCTR_RD_DMA_OFFSET) | (DMA_DEFAULT_VOLUME << EAC_AMVCTR_WR_DMA_OFFSET));
+	omap850_eac_write((u16 *) EAC_AMVCTR, (DMA_DEFAULT_VOLUME << EAC_AMVCTR_RD_DMA_OFFSET) | (DMA_DEFAULT_VOLUME << EAC_AMVCTR_WR_DMA_OFFSET));
 	// Line (GSM) & Mic input volume control
     //    eac_local.line = eac_local.mic = DEFAULT_INPUT_VOLUME;
 		eac_local.line = eac_local.mic = DEFAULT_VOLUME;
@@ -1849,80 +1849,80 @@ static int __init omap730_syren_init(void)
         eac_local.volume = DEFAULT_VOLUME;
         eac_update();
 	// No sidetone
-	temp = omap730_eac_read((u16 *) EAC_ASTCTR);
+	temp = omap850_eac_read((u16 *) EAC_ASTCTR);
 	temp &= ~EAC_ASTCTR_ATTEN;
-	omap730_eac_write((u16 *) EAC_ASTCTR, temp);
+	omap850_eac_write((u16 *) EAC_ASTCTR, temp);
 
 	// Audio processing enable
-	temp = omap730_eac_read((u16 *) EAC_AGCTR);
+	temp = omap850_eac_read((u16 *) EAC_AGCTR);
 	temp |= EAC_AGCTR_AUDEN;
-	omap730_eac_write((u16 *) EAC_AGCTR, temp);
+	omap850_eac_write((u16 *) EAC_AGCTR, temp);
 
 	/*
 	 * Codec port setup
 	 */
 
 	// CODEC Port Interface Control and Status Register
-	temp = omap730_eac_read((u16 *) EAC_CPTCTL) & EAC_CPTCTL_RESERVED;
+	temp = omap850_eac_read((u16 *) EAC_CPTCTL) & EAC_CPTCTL_RESERVED;
 	// CODEC RESET release , clear RECEIVE DATA REGISTER FULL and TRANSMIT DATA REGISTER EMPTY
 	temp |= EAC_CPTCTL_CRST | EAC_CPTCTL_TXE | EAC_CPTCTL_RXF;
 	// C_PORT ENABLE Disabled to configure some registers
 	temp &= ~EAC_CPTCTL_CPEN;
-	omap730_eac_write((u16 *) EAC_CPTCTL, temp);
+	omap850_eac_write((u16 *) EAC_CPTCTL, temp);
 
 	// Codec Port Configuration Register 1
 	// Codec-Port interface mode: I2S mode, Number of time slots per audio frame: 2 time slots per frame
-	omap730_eac_write((u16 *) EAC_CPCFR1, EAC_CPCFR1_MODE_I2S);
+	omap850_eac_write((u16 *) EAC_CPCFR1, EAC_CPCFR1_MODE_I2S);
 
 	// CODEC PORT CONFIGURATION REGISTER 2
-	omap730_eac_write((u16 *) EAC_CPCFR2, EAC_CPCFR2_I2S_20BITS);
+	omap850_eac_write((u16 *) EAC_CPCFR2, EAC_CPCFR2_I2S_20BITS);
 
 	// CODEC PORT INTERFACE CONFIGURATION REGISTER 3
-	omap730_eac_write((u16 *) EAC_CPCFR3, EAC_CPCFR3_I2S_INPUT);
+	omap850_eac_write((u16 *) EAC_CPCFR3, EAC_CPCFR3_I2S_INPUT);
 
 	// CODECPORT INTERFACE CONFIGURATION REGISTER 4
 	// DIVB Calc: (12000000/(2*16*44100))-1=7
-	omap730_eac_write((u16 *) EAC_CPCFR4, EAC_CPCFR4_I2S_DIV7);
+	omap850_eac_write((u16 *) EAC_CPCFR4, EAC_CPCFR4_I2S_DIV7);
 
 	// CODEC Port Interface Control and Status Register
-	temp = omap730_eac_read((u16 *) EAC_CPTCTL) & EAC_CPTCTL_RESERVED;
+	temp = omap850_eac_read((u16 *) EAC_CPTCTL) & EAC_CPTCTL_RESERVED;
 	// C_PORT ENABLE Enabled
 	temp |= EAC_CPTCTL_CPEN;
-	omap730_eac_write((u16 *) EAC_CPTCTL, temp);
+	omap850_eac_write((u16 *) EAC_CPTCTL, temp);
 
 	/*
 	 * Modem port setup
 	 */
 
 	// Modem Port Control Register
-	omap730_eac_write((u16 *) EAC_MPCTR, EAC_MPCTR_DISABLEALL);
+	omap850_eac_write((u16 *) EAC_MPCTR, EAC_MPCTR_DISABLEALL);
 
 	// Modem Port Main channel Configuration Register
-	omap730_eac_write((u16 *) EAC_MPMCCFR, EAC_MPMCCFR_DEFAULT_MASTER_NOCOMP_16BITS);
+	omap850_eac_write((u16 *) EAC_MPMCCFR, EAC_MPMCCFR_DEFAULT_MASTER_NOCOMP_16BITS);
 
 	// Modem Port Control Register
-	temp = omap730_eac_read((u16 *) EAC_MPCTR);
+	temp = omap850_eac_read((u16 *) EAC_MPCTR);
 	temp |= EAC_MPCTR_PRE_MC_16 | EAC_MPCTR_MC_EN;	// Prescaler and enable
-	omap730_eac_write((u16 *) EAC_MPCTR, temp);
+	omap850_eac_write((u16 *) EAC_MPCTR, temp);
 	temp |= EAC_MPCTR_CKEN;				// Clocks running
-	omap730_eac_write((u16 *) EAC_MPCTR, temp);
+	omap850_eac_write((u16 *) EAC_MPCTR, temp);
 
 	/*
 	 * Bluetooth port setup
 	 */
 
 	// Bluetooth Port Control Register
-	omap730_eac_write((u16 *) EAC_BPCTR, EAC_BPCTR_DISABLEALL);
+	omap850_eac_write((u16 *) EAC_BPCTR, EAC_BPCTR_DISABLEALL);
 
 	// Bluetooth Port Main channel Configuration Register
-	omap730_eac_write((u16 *) EAC_BPMCCFR, EAC_BPMCCFR_DEFAULT_SLAVE_NOCOMP_13BITS);
+	omap850_eac_write((u16 *) EAC_BPMCCFR, EAC_BPMCCFR_DEFAULT_SLAVE_NOCOMP_13BITS);
 
 	// Modem Port Control Register
-	temp = omap730_eac_read((u16 *) EAC_BPCTR);
+	temp = omap850_eac_read((u16 *) EAC_BPCTR);
 	temp |= EAC_BPCTR_PRE_MC_16 | EAC_BPCTR_MC_EN;	// Prescaler and enable
-	omap730_eac_write((u16 *) EAC_BPCTR, temp);
+	omap850_eac_write((u16 *) EAC_BPCTR, temp);
 	temp |= EAC_BPCTR_CKEN;				// Clocks running
-	omap730_eac_write((u16 *) EAC_BPCTR, temp);
+	omap850_eac_write((u16 *) EAC_BPCTR, temp);
 
 
 	/*
@@ -1930,7 +1930,7 @@ static int __init omap730_syren_init(void)
 	 */
 
 	/* register devices */
-// 	audio_dev_id = register_sound_dsp(&omap730_audio_fops, -1);
+// 	audio_dev_id = register_sound_dsp(&omap850_audio_fops, -1);
 // 	mixer_dev_id = register_sound_mixer(NULL, -1);
 
 #ifdef CONFIG_CEE  /* MVL-CCE */
@@ -1954,7 +1954,7 @@ static int __init omap730_syren_init(void)
 	return 0;
 }
 
-static void __exit omap730_syren_exit(void)
+static void __exit omap850_syren_remove(void)
 {
 
 #ifdef CONFIG_CEE  /* MVL-CCE */
@@ -1969,9 +1969,49 @@ static void __exit omap730_syren_exit(void)
 //FIXME 	unregister_sound_mixer(mixer_dev_id);
 }
 
-module_init(omap730_syren_init);
-module_exit(omap730_syren_exit);
+static struct miscdevice syren_miscdev = {
+	.minor		= 199,
+	.name		= "omap850_syren",
+	.fops		= &omap850_audio_fops,
+};
+
+
+static int __init omap850_syren_init(void)
+{
+        int ret = 0;
+	struct file_operations *op = NULL;
+
+	op = &omap850_audio_fops;
+	printk(KERN_ALERT "Module omap850-syren init\n");
+	
+	/* add missing file operations from audio */	
+	op = omap_audio_get_fops();
+
+	omap850_audio_fops.release = op->release;
+	omap850_audio_fops.write = op->write;
+	omap850_audio_fops.read	= op->read;
+	omap850_audio_fops.mmap	= op->mmap;
+	omap850_audio_fops.poll	= op->poll;
+	omap850_audio_fops.ioctl = op->ioctl;
+
+	if (ret < 0)
+		goto end;
+	
+	ret = register_chrdev(199, "omap850_syren", op);
+	
+end:
+	return ret;
+}
+
+static void __exit omap850_syren_exit(void)
+{
+        printk(KERN_ALERT "Module omap850-syren exit");
+}
+
+module_init(omap850_syren_init);
+module_exit(omap850_syren_exit);
 
 MODULE_AUTHOR("Jean Pihet");
 MODULE_DESCRIPTION("Glue audio driver for the TI OMAP730 & TI TWL3016 (Syren) CODEC");
 MODULE_LICENSE("GPL");
+
-- 
1.5.6

