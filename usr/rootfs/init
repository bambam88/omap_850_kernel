#!/bin/sh

MODULE_DIR=/initrd.d
BOOT_ROOT=
ROOT_DEVICE=

early_setup() {
    mkdir /proc
    mount -t proc proc /proc
    mkdir /mnt
    modprobe -q mtdblock
}

dev_setup()
{
    echo -n "initramfs: Creating device nodes: "
    grep '^ *[0-9]' /proc/partitions | while read major minor blocks dev
    do
        if [ ! -e /dev/$dev ]; then
            echo -n "$dev "
            [ -e /dev/$dev ] || mknod /dev/$dev b $major $minor
        fi
    done
    echo
}

read_args() {
    [ -z "$CMDLINE" ] && CMDLINE=`cat /proc/cmdline`
    for arg in $CMDLINE; do
        optarg=`expr "x$arg" : 'x[^=]*=\(.*\)'`
        case $arg in
            root=*)
                ROOT_DEVICE=$optarg ;;
            rootfstype=*)
                ROOT_FSTYPE=$optarg ;;
            rootdelay=*)
                rootdelay=$optarg ;;
        esac
    done
}

load_modules() {
    for module in $MODULE_DIR/$1; do
	if [ -e "$module"  ]; then
	    # Cannot redir to $CONSOLE here easily - may not be set yet
            echo "initramfs: Loading $module module"
            source $module
	fi
    done
}

boot_root() {
    cd $BOOT_ROOT
    exec switch_root -c /dev/console $BOOT_ROOT /sbin/init
}

fatal() {
    echo $1 >$CONSOLE
    echo >$CONSOLE
    exec sh
}


echo "Starting initramfs boot..."
early_setup
load_modules '0*'

[ -z "$CONSOLE" ] && CONSOLE="/dev/console"

read_args

if [ -z "$rootdelay" ]; then
    echo "rootdelay parameter was not passed on kernel command line - assuming 2s delay"
    echo "If you would like to avoid this delay, pass explicit rootdelay=0"
    rootdelay="2"
fi
if [ -n "$rootdelay" ]; then
    echo "Waiting $rootdelay seconds for devices to settle..." >$CONSOLE
    sleep $rootdelay
fi
#/sbin/usbethd &
/sbin/ifconfig 192.168.0.99 netmask 255.255.255.0
# Configure network
#/sbin/ifconfig lo 127.0.0.1 netmask 255.0.0.0 broadcast 127.255.255.255
#/sbin/ifconfig usb0 128.247.75.151 netmask 255.255.254.0 broadcast 128.247.75.255
#/sbin/route add default gw 128.247.74.1 eth0

/usr/sbin/telnetd

dev_setup

load_modules '[1-9]*'

[ -n "$BOOT_ROOT" ] && boot_root

fatal "No valid root device was specified.  Please add root=/dev/something to the kernel command-line and try again."
